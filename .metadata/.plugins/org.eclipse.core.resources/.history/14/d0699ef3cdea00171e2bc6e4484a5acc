package buyer;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.util.*;
import product.*;

public class buyer {
	
	public static ArrayList<shoppingCartItem> getInfoShoppingCart(String userId){
		String errorMsg = "";
		Connection conn = null;
        try {
            //連結資料庫
            conn = db.DbConnection.getConnection();
            
        } catch ( Exception e ) {
        	errorMsg = "Get DataSource or Connection error: " + e.toString();
        	System.out.println(errorMsg);
        }
        
        
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
        	String mSql = "select * from shoppingCart where UserId = ?";
        	stmt = conn.prepareStatement(mSql);
        	stmt.clearParameters();
        	stmt.setString( 1, userId );
        	
        	
        	System.out.println(mSql);
        	
        	rs = stmt.executeQuery();
        	rs.last(); // 為了抓數量
            int rowCnt = rs.getRow();
            
            ArrayList<shoppingCartItem> result = new ArrayList<shoppingCartItem>();
            if ( rowCnt > 0 ) {
            	
            	rs.absolute(1); // 記得加
            	
                for ( int i = 0; i < rowCnt; i++ ) {
                	shoppingCartItem tmpQuery = new shoppingCartItem();
                	
                    tmpQuery.setShoppingCartId( rs.getInt( "ShoppingCartId" ) );
                    tmpQuery.setUserId( rs.getString( "UserId" ) );
                    tmpQuery.setAuctionId( rs.getInt( "AuctionId" ) );
                    tmpQuery.setAuctionName( rs.getString( "AuctionName" ) );
                    tmpQuery.setNumberOfProduct( rs.getInt( "NumberOfProduct" ) );
                    tmpQuery.setPrice( rs.getInt( "Price" ) );
                    tmpQuery.setTotal( rs.getInt( "Total" ) );

                    result.add( tmpQuery );
                    rs.next();
                }

            }
            return result;
            
            
			
			
        	
        	
        } catch ( Exception sqle ) {
            errorMsg = "find from table error: " + sqle.toString();
            System.out.println(errorMsg);
        } finally {
            try
            {
                if ( rs != null ) rs.close();
                if ( stmt != null ) stmt.close();
                conn.close();
            } catch ( SQLException se ) {
                errorMsg = "close ResultSet or Statment or connection error: " + se.toString();
                System.out.println(errorMsg);
            }
        }
        
        return null;
	}
	
	public static boolean addShoppingCart(String userId, int auctionId, String auctionName, int numberOfProduct, int price){
		String errorMsg = "";
		Connection conn = null;
        try {
            //連結資料庫
            conn = db.DbConnection.getConnection();
            
        } catch ( Exception e ) {
        	errorMsg = "Get DataSource or Connection error: " + e.toString();
        	System.out.println(errorMsg);
        }
        
        
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
        	//stmt = conn.createStatement();
        	
        	
        	String qsql = "INSERT INTO shoppingCart(UserId, AuctionId, AuctionName , NumberOfProduct, Price, Total)"
        			+ "VALUES(?,?,?,?,?,?)";
        	
        	stmt = conn.prepareStatement(qsql);
        	stmt.clearParameters();
        	stmt.setString(1,userId);
        	stmt.setInt(2,auctionId);
        	stmt.setString(3,auctionName);
        	stmt.setInt(4,numberOfProduct);
        	stmt.setInt(5,price);
        	stmt.setInt(6,numberOfProduct * price);
        	
        	int updateRow = stmt.executeUpdate();
			
			if ( updateRow <= 0 ) {
				try {
					conn.rollback();
					errorMsg = "Insert into table fail.";
					System.out.println(errorMsg);
				}catch(Exception backerr){
					System.out.println("rollback faild!");
				}
			}
        	
			return true;
        	
        } catch ( Exception sqle ) {
            errorMsg = "find from table error: " + sqle.toString();
            System.out.println(errorMsg);
        } finally {
            try
            {
                if ( rs != null ) rs.close();
                if ( stmt != null ) stmt.close();
                conn.close();
            } catch ( SQLException se ) {
                errorMsg = "close ResultSet or Statment or connection error: " + se.toString();
                System.out.println(errorMsg);
            }
        }
        
        return false;
	}
	
}
